import pandas as pd, numpy as np, time 
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import DecisionTreeRegressor
from sklearn.tree import export_graphviz
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestRegressor
import graphviz

def get_frame():
    df = pd.read_csv('cars_and_temps_F18.csv', usecols=[0,1,2,3,4])
    df = df.dropna(subset=['other_T'], how = 'all')
    df = df.reset_index(drop = True)
    
    return df

    #df.columns = df.columns.str.strip()
    #df = df.apply(lambda x: x.astype(str).str.lower())
def clean_frame(df):

    coulmn = []
    for col in df.columns:
        coulmn.append(col.strip())
    df.columns = coulmn

    for row in df.index:
        if df.loc[row,'color'].lower() == 'silver' or df.loc[row,'color'].lower() == 'gold' or 'light' in df.loc[row,'color'].lower():
            df.loc[row,'color'] = 'light'
        elif df.loc[row,'color'].lower() == 'white' or df.loc[row,'color'].lower() == 'black' or df.loc[row,'color'].lower() == 'light' or df.loc[row,'color'].lower() == 'dark':
            df.loc[row,'color'] = df.loc[row,'color'].strip().lower()
        else:
            df.loc[row,'color'] = 'dark' 

    for row in df.index:
        if 'n' in df.loc[row,'shade'].lower():
            df.loc[row,'shade'] = 'n'
        elif 'y' in df.loc[row,'shade'].lower():
            df.loc[row,'shade'] = 'y'
        else:
            df.loc[row,'shade'] = 'p'

    for row in df.index:
        if df.loc[row,'finish'] == 'gloss' or df.loc[row,'finish'] == 'Glossy':
            df.loc[row,'finish'] = 'glossy'
        elif pd.isnull(df.loc[row,'finish']):
            df.loc[row,'finish'] = 'unk'
        else:
            df.loc[row,'finish'] = df.loc[row,'finish'].lower()

def get_X_and_y(df):

    y = []
    X = df[['hood_T','color','shade','finish']]
    y = pd.Series(df['other_T'].values)

    return X,y

def bin_y(v,numBins = 5):

    width = 100 / numBins

    for i in range(len(v)):
        if v[i] <= 90 + width:
            v[i] = 0
        elif 90 + width < v[i] <= 90 + (width*2):
            v[i] = 1
        elif 90 + (width*2)< v[i] <= 90 + (width*3):
            v[i] = 2
        elif 90 + (width*3) < v[i] <= 90 + (width*4):
            v[i] = 3
        elif 90 + (width*4) < v[i] <= 90 + (width*5):
            v[i] = 4

    return v
def make_and_plot_tree(df, v, model_name, depth = None, sequance = None, file_sans = "temp", view = True):
    if model_name == 'DecisionTreeClassifier':
        model = DecisionTreeClassifier(max_depth = depth)
        
     
    elif model_name == 'RandomForestRegressor':
        model = RandomForestRegressor(max_depth= depth)
        model.fit(df,v)
        return model
    else:
        model = DecisionTreeRegressor(max_depth= depth)
    model.fit(df,v)    
    
    dotfile = export_graphviz(model, out_file = None, rounded = True, filled = True, feature_names = df.columns)
    graph = graphviz.Source(dotfile, format = "png")
    graph.render(file_sans, view = view)
    
    return model
def make_and_test(df, v, model_name, depth = None, sequance = None, file_sans = "temp", view = True):
    graph = make_and_plot_tree(df, v, model_name, depth = None, sequance = None, file_sans = "temp", view = True)